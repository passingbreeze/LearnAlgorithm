import heapq

def solution(intervals: list[list[int]]) -> int:
    if not intervals:
        return 0
    intervals.sort(key=lambda x: x[0])

    min_heap = []
    answer = 0
    for start, end in intervals:
        while min_heap and min_heap[0] <= start:
            heapq.heappop(min_heap)
        heapq.heappush(min_heap, end)
        answer = max(answer, len(min_heap))
    return answer


if __name__ == '__main__':
    # Test cases
    input1_test = [[0, 30], [5, 10], [15, 20]]
    print(solution(input1_test))  # Expected output: 2
    print(solution(input1_test) == 2)

    input2_test = [[7, 10], [2, 4]]
    print(solution(input2_test))  # Expected output: 1
    print(solution(input2_test) == 1)

    input3_test = [[1, 2], [2, 3], [3, 4], [1, 3]]
    print(solution(input3_test))  # Expected output: 4
    print(solution(input3_test) == 2)

    input4_test = [[1, 2], [2, 3], [3, 4], [1, 3], [5, 6]]
    print(solution(input4_test))  # Expected output: 5
    print(solution(input4_test) == 2)

    input5_test = [[40863,132763],[196701,397009],[506853,857635],[718147,937968],[27971,637330],[201677,682567],[132382,929434],[168330,708958],[592822,879175],[134987,488822],[66721,698967],[21171,727126],[230439,710286],[344290,599168],[644837,810276],[290666,519191],[303545,588304],[368646,961382],[5840,358842],[156745,744688],[52617,891270],[784867,906714],[26471,87095],[582430,776956],[506648,863600],[138514,608095],[288406,557479],[184940,474286],[912662,965956],[72147,726947],[464200,748795],[92743,316502],[514927,593297],[209820,344198],[36996,742673],[270366,521703],[940174,964092],[469321,521367],[347728,581939],[56538,330826],[463845,508859],[286954,526949],[156989,749586],[610809,795747],[636853,990870],[116783,684978],[81472,446446],[951389,977628],[147920,453466],[799916,958093],[79907,265284],[504258,790136],[287078,964669],[261319,453661],[226033,940259],[552194,741803],[430479,743112],[667485,900832],[862710,868052],[13336,872977],[467193,570536],[50624,917157],[283583,378399],[271578,552425],[183521,296285],[45712,934224],[231871,692292],[620395,753252],[497758,563587],[111101,227474],[200336,530394],[10056,547623],[18615,567891],[78470,235869],[496646,825571],[417948,476899],[136459,454828],[137779,469107],[360125,542630],[692323,851691],[968288,985003],[430590,700469],[618144,682247],[163312,379528],[836235,928423],[282570,576599],[372586,690353],[123831,542288],[230855,517322],[367891,608684],[360230,857112],[131252,645713],[586360,967925],[466242,872780],[397165,579931],[86348,986642],[221660,901141],[617663,623287],[240342,674769],[306373,598897],[163495,172587],[406888,947607],[501580,792395],[79779,877338],[312655,914884],[561489,611557],[227089,269815],[39805,564423],[512463,540624],[560041,778182],[445136,770017],[255183,529516],[122702,526972],[410825,733874],[100333,737954],[13400,279273],[391578,459538],[48896,486293],[112816,760160],[147596,488016],[359888,951481],[398103,630484],[251055,263327],[211120,500457],[412290,755960],[248723,898324],[17002,180509],[292651,622900],[100760,486952],[660859,929315],[170149,982237],[399015,422862],[284509,438363],[14730,484142],[517179,943364],[872690,974680],[384986,630892],[135339,573316],[41672,594822],[96340,344381],[287611,298298],[201451,588069],[347069,891672],[489820,716558],[601111,916733],[270026,931453],[127240,934439],[80495,839742],[334197,720580],[467666,985462]]
    print(solution(input5_test))
    print(solution(input5_test) == 87)